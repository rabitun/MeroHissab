@page "/cashoutflow"
@inject ITransactionService TransactionService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<style>
    body, html {
        font-family: 'Arial', sans-serif;
        background-color: #eef2f7;
        margin: 0;
        padding: 0;
    }

    h1 {
        text-align: center;
        color: #2d4059;
        font-weight: 600;
    }

    .button {
        padding: 12px 24px;
        background-color: #17a2b8;
        color: white;
        border: none;
        border-radius: 5px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .button:hover {
            background-color: #138496;
        }

    .button-danger {
        background-color: #dc3545;
    }

        .button-danger:hover {
            background-color: #c82333;
        }

    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        padding: 40px 30px;
        border-radius: 15px;
        box-shadow: 0px 8px 30px rgba(0, 0, 0, 0.1);
        width: 500px;
        max-width: 100%;
    }

    .close-button {
        position: absolute;
        top: 15px;
        right: 15px;
        background: none;
        border: none;
        font-size: 24px;
        color: #555;
        cursor: pointer;
    }

    input, select, textarea {
        width: 100%;
        padding: 12px 15px;
        border: 1px solid #ced4da;
        border-radius: 8px;
        font-size: 16px;
        transition: border-color 0.3s ease-in-out;
    }

        input:focus, select:focus, textarea:focus {
            border-color: #879E5D;
        }

    .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

        .table th, .table td {
            padding: 8px;
            text-align: left;
            border-bottom: 1px solid #ccc;
        }

        .table thead {
            background-color: #2d4059;
            color: white;
        }

        .table tbody tr:nth-child(odd) {
            background-color: #f8f9fa;
        }
</style>

<h3 style="color: #050552; font-family: Arial, sans-serif; font-weight: bold; text-align: center;">Cash Outflow Management</h3>

<div style="text-align: center; margin-bottom: 20px;">
    <button @onclick="OpenModal" style="padding: 10px 20px; background-color: #2A3B5F; color: #fff; border: none; border-radius: 5px; font-size: 16px; cursor: pointer; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); transition: background-color 0.3s ease;">
        Add Cash Outflow
    </button>
</div>

@if (IsModalOpen)
{
    <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); display: flex; align-items: center; justify-content: center; z-index: 1000;">
        <div style="background: #fff; padding: 40px 30px; border-radius: 15px; box-shadow: 0px 8px 30px rgba(0, 0, 0, 0.1); width: 500px; max-width: 100%; height: auto; position: relative;">
            <button type="button" @onclick="CloseModal" style="position: absolute; top: 15px; right: 15px; background: none; border: none; font-size: 24px; color: #555; cursor: pointer;">&times;</button>
            <h4 style="margin-bottom: 25px; font-size: 24px; font-weight: bold; color: #333; text-align: center;">Add Cash Outflow</h4>
            <form @onsubmit="SaveTransaction">
                <!-- Title and Amount in One Div, One Line -->
                <div style="display: flex; gap: 20px; margin-bottom: 25px;">
                    <div style="flex: 1;">
                        <label style="display: block; margin-bottom: 8px; font-weight: bold; color: #444;">Title:</label>
                        <input type="text" @bind="NewTransaction.Title" placeholder="Title"
                               style="width: 100%; padding: 12px 15px; border: 1px solid #ccc; border-radius: 8px; font-size: 16px; transition: all 0.3s ease;" required
                               onfocus="this.style.borderColor='#879E5D'" onblur="this.style.borderColor='#ccc'" />
                    </div>
                    <div style="flex: 1;">
                        <label style="display: block; margin-bottom: 8px; font-weight: bold; color: #444;">Amount:</label>
                        <input type="number" @bind="NewTransaction.Amount" placeholder="Amount"
                               style="width: 100%; padding: 12px 15px; border: 1px solid #ccc; border-radius: 8px; font-size: 16px; transition: all 0.3s ease;" required
                               onfocus="this.style.borderColor='#879E5D'" onblur="this.style.borderColor='#ccc'" />
                    </div>
                </div>

                <!-- Date and Tags in One Div, One Line -->
                <div style="display: flex; gap: 20px; margin-bottom: 25px;">
                    <div style="flex: 1;">
                        <label style="display: block; margin-bottom: 8px; font-weight: bold; color: #444;">Date:</label>
                        <input type="date" @bind="NewTransaction.Date"
                               style="width: 100%; padding: 12px 15px; border: 1px solid #ccc; border-radius: 8px; font-size: 16px; transition: all 0.3s ease;" required
                               onfocus="this.style.borderColor='#879E5D'" onblur="this.style.borderColor='#ccc'" />
                    </div>
                    <div style="flex: 1;">
                        <label style="display: block; margin-bottom: 8px; font-weight: bold; color: #444;">Tags:</label>
                        <select @bind="NewTransaction.Tag" style="width: 100%; padding: 12px 15px; border: 1px solid #ccc; border-radius: 8px; font-size: 16px; transition: all 0.3s ease;">
                            <option value="" disabled>Select a tag</option>
                            @foreach (var tag in Tags)
                            {
                                <option value="@tag">@tag</option>
                            }
                        </select>
                    </div>
                </div>

                <!-- Add Custom Tag and Add Tag Button in One Div, One Line -->
                <div style="display: flex; gap: 20px; margin-bottom: 25px;">
                    <div style="flex: 1;">
                        <label style="display: block; margin-bottom: 8px; font-weight: bold; color: #444;">Add Custom Tag:</label>
                        <input type="text" @bind="CustomTag" placeholder="Custom Tag"
                               style="width: 100%; padding: 12px 15px; border: 1px solid #ccc; border-radius: 8px; font-size: 16px; transition: all 0.3s ease;" />
                    </div>
                    <div style="flex: 1; display: flex; align-items: flex-end;">
                        <button type="button" @onclick="AddCustomTag"
                                style="padding: 12px 20px; background-color: #050552;; color: white; border: none; border-radius: 8px; cursor: pointer; font-size: 16px; width: 100%; transition: background-color 0.3s ease;">
                            Add Tag
                        </button>
                    </div>
                </div>

                <!-- Description -->
                <label style="display: block; margin-bottom: 8px; font-weight: bold; color: #444;">Notes:</label>
                <textarea @bind="NewTransaction.Notes" placeholder="Leave a note"
                          style="width: 100%; height: 120px; margin-bottom: 25px; padding: 12px 15px; border: 1px solid #ccc; border-radius: 8px; font-size: 16px; transition: all 0.3s ease;"></textarea>

                <!-- Save Button -->
                <div style="display: flex; justify-content: center;">
                    <button type="submit"
                            style="padding: 12px 50px; background-color: #050552;; color: white; border: none; border-radius: 6px; font-size: 16px; font-weight: medium; cursor: pointer; box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1); transition: background-color 0.2s ease;">
                        Save
                    </button>
                </div>
            </form>
        </div>
    </div>
}


<h4 style="color: #2A3B5F; font-family: Arial, sans-serif; font-weight: bold; margin-top: 30px;">Cash Outflow Records</h4>

<table style="width: 100%; border-collapse: collapse; margin-top: 20px;  font-size: 14px;">
    <thead>
        <tr style="background-color: #050552; color: white;">
            <th style="border: 1px solid #ccc; padding: 8px;">Title</th>
            <th style="border: 1px solid #ccc; padding: 8px;">Amount</th>
            <th style="border: 1px solid #ccc; padding: 8px;">Date</th>
            <th style="border: 1px solid #ccc; padding: 8px;">Tag</th>
            <th style="border: 1px solid #ccc; padding: 8px;">Notes</th>
            <th style="border: 1px solid #ccc; padding: 8px;">Action</th>
        </tr>
    </thead>
    <tbody>
        @if (Transactions.Any())
        {
            @foreach (var transaction in Transactions)
            {
                <tr>
                    <td style="border: 1px solid #ccc; padding: 8px;">@transaction.Title</td>
                    <td style="border: 1px solid #ccc; padding: 8px;">@transaction.Amount</td>
                    <td style="border: 1px solid #ccc; padding: 8px;">@transaction.Date.ToShortDateString()</td>
                    <td style="border: 1px solid #ccc; padding: 8px;">@transaction.Tag</td>
                    <td style="border: 1px solid #ccc; padding: 8px;">@transaction.Notes</td>
                    <td style="border: 1px solid #ccc; padding: 8px;">
                        <button @onclick="() => EditTransaction(transaction)"
                                style="padding: 6px 12px; background-color: #007BFF; color: white; border: none; border-radius: 5px; cursor: pointer; margin-right: 5px;">
                            Edit
                        </button>
                        <button @onclick="() => DeleteTransaction(transaction)"
                                style="padding: 6px 12px; background-color: #FF4F4F; color: white; border: none; border-radius: 5px; cursor: pointer;">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5" style="border: 1px solid #ccc; padding: 8px; text-align: center;">No records found.</td>
            </tr>
        }
    </tbody>
</table>


@code {
    private bool IsModalOpen { get; set; } = false;
    private Transaction NewTransaction { get; set; } = new Transaction
        {
            Title = "",
            Type = "Debit",
            Amount = 0,
            Date = DateTime.Now,
            Notes = string.Empty
        };
    private List<string> Tags { get; set; } = new List<string>
    {
        "Food", "Entertainment", "Utilities", "Rent", "Miscellaneous", "Transportation", "Medical", "Shopping"
    };
    private string CustomTag { get; set; } = string.Empty;
    private List<Transaction> Transactions { get; set; } = new();
    private Transaction selectedTransaction { get; set; } = null;
    private decimal TotalInflows { get; set; } = 0;

    static string Outflow_fileName = "cash_outflow.json";
    static string outflow_Path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), Outflow_fileName);

    protected override async Task OnInitializedAsync()
    {
        await LoadFromJsonFile();
        TotalInflows = await GetTotalInflows();
    }

    private async Task LoadFromJsonFile()
    {
        if (System.IO.File.Exists(outflow_Path))
        {
            string jsonString = await System.IO.File.ReadAllTextAsync(outflow_Path);
            Transactions = System.Text.Json.JsonSerializer.Deserialize<List<Transaction>>(jsonString) ?? new List<Transaction>();
        }
    }

    private async Task<decimal> GetTotalInflows()
    {

        string InflowFilePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "cash_inflow.json");


        if (System.IO.File.Exists(InflowFilePath))
        {
            string jsonString = await System.IO.File.ReadAllTextAsync(InflowFilePath);
            var inflows = System.Text.Json.JsonSerializer.Deserialize<List<Transaction>>(jsonString) ?? new List<Transaction>();
            return inflows.Sum(t => t.Amount);
        }
        return 0;
    }

    private void OpenModal()
    {
        selectedTransaction = null; // Reset for new transaction
        IsModalOpen = true;
    }

    private void CloseModal() => IsModalOpen = false;

    private void AddCustomTag()
    {
        if (!string.IsNullOrWhiteSpace(CustomTag) && !Tags.Contains(CustomTag))
        {
            Tags.Add(CustomTag);
            CustomTag = string.Empty;
        }
    }

    private async Task SaveTransaction()
    {
        decimal currentOutflows = Transactions.Sum(t => t.Amount);
        if (currentOutflows + NewTransaction.Amount > TotalInflows)
        {
            await ShowAlert("Insufficient funds! Your total outflows cannot exceed the available outflow amount.");
            return;
        }

        Transactions.Add(NewTransaction);
        await SaveToJsonFile();
        CloseModal();
    }

    private async Task UpdateTransaction()
    {
        var index = Transactions.FindIndex(t => t == selectedTransaction);
        if (index != -1)
        {
            Transactions[index] = NewTransaction;
            await SaveToJsonFile();
            CloseModal();
        }
    }

    private async Task SaveToJsonFile()
    {
        string jsonString = System.Text.Json.JsonSerializer.Serialize(Transactions);
        await System.IO.File.WriteAllTextAsync(outflow_Path, jsonString);
        await LoadFromJsonFile();
    }

    private void EditTransaction(Transaction transaction)
    {
        selectedTransaction = transaction;
        NewTransaction = transaction; // Pre-fill form with selected transaction
        IsModalOpen = true;
    }

    private async Task DeleteTransaction(Transaction transaction)
    {
        Transactions.Remove(transaction);
        await SaveToJsonFile();
    }

    private async Task ShowAlert(string message)
    {
        await JSRuntime.InvokeVoidAsync("alert", message);
    }
    public class Transaction
    {

        public string Title { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
        public decimal Amount { get; set; }
        public string Tag { get; set; } = string.Empty;
        public DateTime Date { get; set; }
        public string Notes { get; set; } = string.Empty;
    }
}